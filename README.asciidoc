= Install Plugin for Components to Install Anywhere
:source-highlighter: prettify
:blank: pass:[ +]
:latestRevision: 1.0.0
:icons: font
:toc:

image:https://travis-ci.org/IntershopCommunicationsAG/component-installation-plugin.svg?branch=master["Build Status", link="https://travis-ci.org/IntershopCommunicationsAG/component-installation-plugin"]
image:https://api.codacy.com/project/badge/Grade/10be1565bc224733aeb2d660374ba726["Codacy code quality", link="https://www.codacy.com/app/IntershopCommunicationsAG/component-installation-plugin?utm_source=github.com&utm_medium=referral&utm_content=IntershopCommunicationsAG/component-installation-plugin&utm_campaign=Badge_Grade"]

NOTE: This library requires Gradle 4 and JDK 8

NOTE: This library is under development and not final released.

== Summary
This plugin creates an installation from configured component artifacts. This components will be created by the
component-build-plugin. Each component consists of a descriptor, packages files etc. The descriptor is based on Json.
The configuration of the plugin includes not only the dependencies of the components. It includes also a type
configuration to specify the scope of the installation. The target operating system will be also considerd automatically.

== Usage
To apply the component-installation Gradle plugin to your projects, add the following in your build script:

[source,groovy]
[subs=+attributes]
.build.gradle
----
plugins {
    id 'com.intershop.gradle.component.installation' version '{latestRevision}'
}

installation {
    environment('production')

    add("com.intershop.test:testcomponent:1.0.0")

    installDir = file('installation')
}
----

== Tasks

[cols="25%,30%,45%", width="100%", options="header"]
|===
|Task name                              | Type                 | Description

|install                                | Task                 | Starts the whole installation
|install<common component name>         | Task                 | Starts the installation of a component
|install<common component name>CleanUp  | CleanUpTask (*)      | Removes or backup directories in the component installation directory,  +
that are not part of the installation.
|install<common component name>Libs     | InstallTask (*)      | Installation task of all libraries.
|install<common component name>Module*  | InstallTask (\*) +
   InstallMutableTask (*) | Installation tasks of all modules. InstallTask is used for all modules, that are not changeable.
   For modules with content type: 'DATA' and 'CONFIGURATION' InstallMutableTask is used.
|install<common component name>Pkg*     | InstallTask (\*) +
InstallMutableTask (*) | Installation tasks of all containers. InstallTask is used for all containers, that are not changeable.
   For packages with content type: 'DATA' and 'CONFIGURATION' InstallMutableTask is used.
|install<common component name>Dir<path elements>| DirectoryTask (*)    | This task creates a directory with installation information.
|install<common component name>Links    | LinkTask (*)         | This task creates links of a component.
|preInstall<common component name>      | Task                 | Starts all tasks before the installation of the component runs.
|preInstall                             | Task                 | Starts all tasks before the installation runs.
|===

The group of all tasks with (*) is `com.intershop.gradle.component.installation.tasks`.
The install task is a sync task, that preserves the modified time of the source files.

The order of the task is

. `preInstall`
. `preInstall<common component name>`, eg. `preInstallTestcomponent`
. `install<common component name>Cleanup`, `install<`common component name>Libs`, `install<common component name>Module*`,
`install<common component name>Pkg*`, install<common component name>Dir<path elements>` are executed in parallel
. `install<common component name>`, eg. installTestcomponent
. `install<common component name>Links`, eg. installTestcomponentLinks runs after `install<common component name>`
. `install`

If you run
----
./gradlew install
----
all installation related tasks will be executed in the correct order.

== Project Extension 'installation'

=== Properties of 'installation'
[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<installDir, installDir>> | This is the main installation directory of the project.
|<<installConfig, installConfig>> | With this configuration it is possible to change default values for installation process.
|<<environment, environment>> | Specifies the environment type configuration, like 'production', 'test', 'intTest'.
|<<components, components>> | Set of components to install with this one installation project.
|<<filters, filters>> | Container for all filter configurations. These filter configurations will help to adapt file
content of all changable containers and modules.
|===

[[installDir]]
[source,groovy]
File installDir

This is the main installation of the project. If this directory is availabe the plugin tries to figure out the status
of the previous installation. This configuration must be specified.

NOTE: Directories, that are not part of the installation will be deleted!

:::

Default:: null

***

[[installConfig]]
[source,groovy]
InstallConfiguration installConfig

With this configuration it is possible to add additional patterns for Ivy repositories. Furthermore it is possible to change
the default admin directory of this installation process.

:::

Default:: an instance of InstallConfiguration

***

[[environment]]
[source,groovy]
Set<String> environment

This is a list of environment names or types. The elements of this list will be compared with the configuration in the
descriptor of the component.

:::

Default:: `[]`

Example:: `['test', 'inttest']` - All items with on these configuration elements will be installed.

***

[[components]]
[source,groovy]
Set<Component> components

The set of components will be handled in this variable.

:::

Default:: `[]`

***

[[filters]]
[source,groovy]
FilterContainer filters

The configuration container for all filter configurations.

:::

Default:: `[]`

***


=== Methods of 'installation'

[cols="1m,1d" width="100%", options="header"]
|===
|Method     | Description

|<<add, add>>(component) | Adds a component through a dependency.
|<<addpath, add>>(component, path) | Adds a component through a dependency with a special path.
|<<addaction, add>>(component, action) | Adds a component through a dependency and configures the component with an action.
|<<addclosure, add>>(component, closure) | Adds a component through a dependency and configures the component with a closure.
|<<addpathaction, add>>(component, path, action) | Adds a component through a dependency with a special path and configures the component with an action.
|<<addpathclosure, add>>(component, path, closure) | Adds a component through a dependency with a special path and configures the component with a closure.
|<<conffilters, filters>>(action) | Configures a preconfigured filter container.
|===

[[add]]
[source,groovy]
Component add(Object component)

This method adds a component through a simple dependency to the set of components.
The new entry is checked. If the component still exists in the list with the same path, an InvalidUserDataException
will be thrown.

:::

Example::
`add('com.intershop:testcomp:1.0.0')` +
`add(group: 'com.intershop', name: 'testcomp', version: '1.0.0')` +
`add([group: 'com.intershop', name: 'testcomp', version: '1.0.0'])`


***

[[addpath]]
[source,groovy]
Component add(Object component, String path)

This method adds a component through a simple dependency to the set of components with a special path.
The new entry is checked. If the component still exists in the list with the same path, an InvalidUserDataException
will be thrown.

:::

Example::
`add('com.intershop:testcomp:1.0.0', 'testpath1')` +
`add([group: 'com.intershop', name: 'testcomp', version: '1.0.0'], 'testpath1')`

***

[[addaction]]
[source,groovy]
Component add(Object component, Action<? super Component> action)

[[addclosure]]
[source,groovy]
Component add(Object component, Closure closure)

This method adds a component through a dependency to the set of components and configures the component with an action
or closure. The new entry is checked. If the component still exists in the list with the same path, an InvalidUserDataException
will be thrown.

:::

Example::
[source,groovy]
add('com.intershop:testcomp:1.0.0') {
    exclude '**/**/*.jpg'
    preserve {
        include '**/**/*.jpg'
    }
}

***

[[addpathaction]]
[source,groovy]
Component add(Object component, String path, Action<? super Component> action)

[[addpathclosure]]
[source,groovy]
Component add(Object component, String path, Closure closure)

This method adds a component through a dependency to the set of components with a path and configures the component with an action
or closure. The new entry is checked. If the component still exists in the list with the same path, an InvalidUserDataException
will be thrown.

:::

Example::
[source,groovy]
add('com.intershop:testcomp:1.0.0', 'testpath') {
    exclude '**/**/*.jpg'
    preserve {
        include '**/**/*.jpg'
    }
}

***

[[conffilters]]
[source,groovy]
void filters(Action<? super FilterContainer> action)

This method configures the filter container for all InstallMutableTasks.

:::

Example::
[source,groovy]
filters {
    overrideProperties("test1", "**/**/test1file.properties") {
        setProperty("test3.test", "test3")
        setProperty("test4.test", "test4")
    }
}

***

=== Container 'installConfig'

==== Properties of 'installConfig'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<installAdminDir,installAdminDir>> | This is the main administration directory of the project.
|<<ivyPatterns, ivyPatterns>> | All available Ivy patterns. This is used for the download of a configured component.
|===

[[installAdminDir]]
[source,groovy]
File installAdminDir

This is the main administration directory of the project.

:::

Default:: `project.buildDir`

***

[[ivyPatterns]]
[source,groovy]
Set<String> ivyPatterns

All available Ivy patterns. This is used for the download of a configured component.

:::

Default:: `["[organisation]/[module]/[revision]/[ext]s/[artifact]-[type](-[classifier])-[revision].[ext]", +
            "[organisation]/[module]/[revision]/[type]s/ivy-[revision].xml", +
            "[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])", +
            "[organisation]/[module]/[revision]/[type]s/[artifact](.[ext])"]`

***

==== Methods of 'installConfig'

[cols="1m,1d" width="100%", options="header"]
|===
|Method     | Description

|<<addIvyPattern,addIvyPattern>>(pattern) | Adds an new Ivy pattern.
|===

[[addIvyPattern]]
[source,groovy]
void add(String pattern)

Adds an new Ivy pattern.

:::

Example::
addIvyPattern('[organisation]/[module]/[revision]/[ext]s/[artifact]-[type]-[revision].[ext]')

***

=== Container 'component'

==== Properties of 'component'

[cols="1m,2d" width="100%", options="header"]
|===
|Property | Description

|<<commonName, commonName>> | The common name of the component is used for tasks and log output.
|<<dependency, dependency>> | The dependency object of this component. It must be always an external module dependency.
|<<excludes, excludes>> | With this Ant pattern set it is possible to exclude files from the installation.
|<<preserve, preserve>> | With this pattern set it is possible to preserve files from deletion during the installation of a component.
|===

[[commonName]]
[source,groovy]
String commonName

The common name of the component is used for tasks and log output.

:::

Value:: <Name><Path>...<Path>

Example:: `Testcomponent`, `TestcomponentPath`

***

[[dependency]]
[source,groovy]
Dependency dependency

The dependency object of this component. It must be always an external module dependency.

:::

Value:: Dependency(<group>, <module>, <version>)

***

[[excludes]]
[source,groovy]
Set<String> excludes

With this Ant pattern set it is possible to exclude files from the installation. This files will be not copied to the installation.
Installed files will be deleted without a correct preserve configuration.

:::

Default:: `[]`

***

[[preserve]]
[source,groovy]
PatternFilterable preserve

With this pattern set it is possible to preserve files from deletion during the installation of a component.

:::

Default:: an instance of PatternSet

***

==== Methods of 'component'

[cols="1m,1d" width="100%", options="header"]
|===
|Method     | Description

|<<excludep, exclude>>(pattern) | Adds an exclude Ant pattern to the exclude set.
|<<excludeps, exclude>>(patterns) | Adds a set of exclude Ant pattern to the exclude set.
|<<preserveaction, preserve>>(action) | Configures the preserve pattern set with an action.
|<<preserveclosure, preserve>>(closure) | Configures the preserve pattern set with a closure.
|===

[[excludep]]
[source,groovy]
void exclude(String pattern)

Adds an exclude Ant pattern to the exclude set.

:::

Example::
`exclude('**/**/*.pdf')`

***

[[excludeps]]
[source,groovy]
void exclude(Set<String> patterns)

Adds a set of exclude Ant pattern to the exclude set. This files will be not copied to the installation.
Installed files are deleted without a correct preserve configuration.

:::

Example::
`exclude(['**/**/*.pdf', '**/**/*.doc', '**/**/*.jpg'])`

***

[[preserveaction]]
[source,groovy]
preserve(Action<? super PatternFilterable> action)

[[preserveclosure]]
[source,groovy]
void preserve(Closure closure)

Configures the preserve pattern set with a closure or action. Files and directories that be satified by this filter,
are not deleted from the install task.

:::

Example::
[source,groovy]
add('com.intershop:testcomp:1.0.0', 'testpath') {
    exclude '**/**/*.jpg'
    preserve {
        include '**/**/*.jpg'
    }
}

***

=== Container 'filters'

==== Methods of 'filters'

[cols="1m,1d" width="100%", options="header"]
|===
|Method     | Description

|<<overrideProperties1, overrideProperties>>(name, include, properties) | This method add a filter for an include pattern with a configuration in properties for FormattedProperties.
|<<overrideProperties2, overrideProperties>>(name, includes, properties) | This method add a filter for an include pattern set with a configuration in properties for FormattedProperties.
|<<overrideProperties3, overrideProperties>>(name, pattern, properties) | This method add a filter for pattern set with a configuration in properties for FormattedProperties.
|<<xmlContent1, xmlContent>>(name, include, xml) | This method add a filter for an include pattern with a configuration in xml for XmlProvider.
|<<xmlContent2, xmlContent>>(name, includes, xml) | This method add a filter for an include pattern set with a configuration in xml for XmlProvider.
|<<xmlContent3, xmlContent>>(name, pattern, xml) | This method add a filter for pattern set with a configuration in xml for XmlProvider.
|<<fullContent1, fullContent>>(name, include, content) | This method add a filter for an include pattern with a configuration in content for StringBuilder.
|<<fullContent2, fullContent>>(name, includes, content) | This method add a filter for an include pattern set with a configuration in content for StringBuilder.
|<<fullContent3, fullContent>>(name, pattern, content) | This method add a filter for pattern set with a configuration in content for StringBuilder.
|<<replacePlaceholders,replacePlaceholders>>(name, replacePlaceHolder) | This method add a filter that replaces placeholders per line for files specified in the pattern set.
|<<transformer1, addTransformer>>(name, include, transformer) | This method add a Transformer for an include pattern to edit files based on lines.
|<<transformer2, addTransformer>>(name, includes, transformer) | This method add a Transformer for an include pattern set to edit files based on lines.
|<<transformer3, addTransformer>>(name, pattern, transformer) | This method add a Transformer for pattern set to edit files based on lines.
|<<closure1, addClosure>>(name, include, closure) | This method add a Closure for an include pattern to edit files based on lines.
|<<closure2, addClosure>>(name, includes, closure) | This method add a Closure for an include pattern set to edit files based on lines.
|<<closure3, addClosure>>(name, pattern, closure) | This method add a Closure for pattern set to edit files based on lines.
|===

[[overrideProperties1]]
[source,groovy]
void overrideProperties(String name, String include, Action<? super FormattedProperties> properties)

[source,groovy]
void overrideProperties(String name, String include, Closure<FormattedProperties> properties)

This method add a filter for an include pattern with a configuration in properties for FormattedProperties.

:::

Example::
[source,groovy]
----
overrideProperties("propname", "**/webadapter/webadapter.properties") {
    setProperty("errorlog.level", "INFO")
    setProperty("webadapterAgent.pageCache.expiredFiles.deletionDelay", "60")

    remove("property.key.remove")
    addComment("property.key", [ "This is a comment for property.key" ])
}
----

***

[[overrideProperties2]]
[source,groovy]
void overrideProperties(String name, Set<String> includes, Action<? super FormattedProperties> properties)

[source,groovy]
void overrideProperties(String name, Set<String> includes, Closure<FormattedProperties> properties)

This method add a filter for an include pattern set with a configuration in properties for FormattedProperties.

:::

Example::
[source,groovy]
----
overrideProperties("propname", ["**/webadapter1/webadapter.properties", "**/webadapter2/webadapter.properties"] ) {
    setProperty("errorlog.level", "INFO")
    setProperty("webadapterAgent.pageCache.expiredFiles.deletionDelay", "60")

    remove("property.key.remove")
    addComment("property.key", [ "This is a comment for property.key" ])
}
----

***

[[overrideProperties3]]
[source,groovy]
void overrideProperties(String name, PatternSet patternset, Action<? super FormattedProperties> properties)

[source,groovy]
void overrideProperties(String name, PatternSet patternset, Closure<FormattedProperties> properties)

This method add a filter for an include pattern set with a configuration in properties for FormattedProperties.

:::

Example::
[source,groovy]
----
def patternset = new PatternSet()
patternset.exclude("**/webadapter1/webadapter.properties")
patternset.include("**/**/webadapter.properties")

overrideProperties("propname", patternset ) {
    setProperty("errorlog.level", "INFO")
    setProperty("webadapterAgent.pageCache.expiredFiles.deletionDelay", "60")

    remove("property.key.remove")
    addComment("property.key", [ "This is a comment for property.key" ])
}
----

***

[[xmlContent1]]
[source,groovy]
void xmlContent(String name, String include, Action<? super XmlProvider> properties)

[source,groovy]
void xmlContent(String name, String include, Closure<XmlProvider> closure)

This method add a filter for an include pattern with a configuration in xml for XmlProvider.

:::

Example::
[source,groovy]
----
xmlContent("xmlname", "**/cluster/configuration.xml") { XmlProvider provider ->
    def sets = provider.asNode().sets.first().children()
    def lastDomainSpecificSet = sets.findAll {it.@scope=='domain'}.last()
    def newSet = new Node(null, 'set', [finder:'property', scope:'cluster,server,domain', fileName:'/etc/config/intershop7.properties'])
    sets.add(sets.indexOf(lastDomainSpecificSet)+1, newSet)
}
----

***

[[xmlContent2]]
[source,groovy]
void xmlContent(String name, Set<String> includes, Action<? super XmlProvider> properties)

[source,groovy]
void xmlContent(String name, Set<String> includes, Closure<XmlProvider> closure)

This method add a filter for an include pattern set with a configuration in xml for XmlProvider.

:::

Example::
[source,groovy]
----
xmlContent("xmlname", ["**/cluster1/configuration.xml", "**/cluster2/configuration.xml"]) { XmlProvider provider ->
    def sets = provider.asNode().sets.first().children()
    def lastDomainSpecificSet = sets.findAll {it.@scope=='domain'}.last()
    def newSet = new Node(null, 'set', [finder:'property', scope:'cluster,server,domain', fileName:'/etc/config/intershop7.properties'])
    sets.add(sets.indexOf(lastDomainSpecificSet)+1, newSet)
}
----

***

[[xmlContent3]]
[source,groovy]
void xmlContent(String name, PatternSet patternset, Action<? super XmlProvider> properties)

[source,groovy]
void xmlContent(String name, PatternSet patternset, Closure<XmlProvider> closure)

This method add a filter for pattern set with a configuration in xml for XmlProvider.

:::

Example::
[source,groovy]
----
def patternset = new PatternSet()
patternset.exclude("**/cluster1/configuration.xml")
patternset.include("**/**/configuration.xml")

xmlContent("xmlname", ["**/cluster1/configuration.xml", "**/cluster2/configuration.xml"]) { XmlProvider provider ->
    def sets = provider.asNode().sets.first().children()
    def lastDomainSpecificSet = sets.findAll {it.@scope=='domain'}.last()
    def newSet = new Node(null, 'set', [finder:'property', scope:'cluster,server,domain', fileName:'/etc/config/intershop7.properties'])
    sets.add(sets.indexOf(lastDomainSpecificSet)+1, newSet)
}
----

***

[[fullContent1]]
[source,groovy]
void fullContent(String name, String include, Action<? super StringBuilder> content)

[source,groovy]
void fullContent(String name, String include, Closure<StringBuilder> closure)

This method add a filter for an include pattern with a configuration in content for StringBuilder.

:::

Example::
[source,groovy]
----
fullContent("contentName", "**/httpd/conf/httpd.conf") { StringBuilder content ->
     content.append(System.lineSeparator + '# MyModule configuration' + System.lineSeparator + "Include ${target.localDirectory}/etc/httpd/extra/my-module.conf")
 }
----

***

[[fullContentt2]]
[source,groovy]
void fullContent(String name, Set<String> includes, Action<? super StringBuilder> content)

[source,groovy]
void fullContent(String name, Set<String> includes, Closure<StringBuilder> closure)

This method add a filter for an include pattern set with a configuration in content for StringBuilder.

:::

Example::
[source,groovy]
----
fullContent("contentName", ["**/httpd1/conf/httpd.conf", "**/httpd2/conf/httpd.conf"]) { StringBuilder content ->
     content.append(System.lineSeparator + '# MyModule configuration' + System.lineSeparator + "Include ${target.localDirectory}/etc/httpd/extra/my-module.conf")
 }
----

***

[[fullContent3]]
[source,groovy]
void fullContent(String name, PatternSet patternset, Action<? super StringBuilder> content)

[source,groovy]
void fullContent(String name, PatternSet patternset, Closure<StringBuilder> closure)

This method add a filter for pattern set with a configuration in content for StringBuilder.

:::

Example::
[source,groovy]
----
def patternset = new PatternSet()
patternset.exclude("**/httpd2/configuration.xml")
patternset.include("**/**/conf/httpd.conf")

fullContent("contentName", patternset) { StringBuilder content ->
     content.append(System.lineSeparator + '# MyModule configuration' + System.lineSeparator + "Include ${target.localDirectory}/etc/httpd/extra/my-module.conf")
 }
----

***

[[replacePlaceholders]]
[source,groovy]
void replacePlaceholders(String name, Closure<PlaceholderReplacementFilter> replacePlaceHolder)

This method add a filter that replaces placeholders per line for files specified in the pattern set.

:::

Example::
[source,groovy]
----
replacePlaceholders("placeholders") {
    include '**/bin/*.sh'

    add("IS.HOME", localDirectoryVar)

    placeholders['IS.SHARE'] = shareDirectoryVar
}
----

***

[[transformer1]]
[source,groovy]
void addTransformer(String name, String include, Transformer<String, String> transformer)

This method add a Transformer for an include pattern to edit files based on lines.

:::

Example::
[source,groovy]
----
addTransformer("ownTransformer", "**/**/file.conf", new Transformer<String, String>() {
    @Override
    public String transform(String inStr) {
        if(inStr.startsWidth("#")) {
            return "comment: ".concat(inStr)
        } else {
            return inStr
        }
    }
})
----

***

[[transformer2]]
[source,groovy]
void addTransformer(String name, Set<String> includes, Transformer<String, String> transformer)

This method add a Transformer for an include pattern set to edit files based on lines.

:::

Example::
[source,groovy]
----
addTransformer("ownTransformer", ["**/folder1/file.conf", "**/folder2/file.conf"], new Transformer<String, String>() {
    @Override
    public String transform(String inStr) {
        if(inStr.startsWidth("#")) {
            return "comment: ".concat(inStr)
        } else {
            return inStr
        }
    }
})
----

***

[[transformer3]]
[source,groovy]
void addTransformer(String name, PatternSet patternset, Transformer<String, String> transformer)

This method add a Transformer for pattern set to edit files based on lines.

:::

Example::
[source,groovy]
----
def patternset = new PatternSet()
patternset.exclude("**/folder2/file.conf")
patternset.include("**/**/file.conf")

addTransformer("ownTransformer", patternset, new Transformer<String, String>() {
    @Override
    public String transform(String inStr) {
        if(inStr.startsWidth("#")) {
            return "comment: ".concat(inStr)
        } else {
            return inStr
        }
    }
})
----

***

[[closure1]]
[source,groovy]
void addClosure(String name, String include, Closure closure)

This method add a Closure for an include pattern to edit files based on lines.

:::

Example::
[source,groovy]
----
addClosure("editLine", "**/folder/file.conf") {
    String line -> line =~ /^\\w*ServerAdmin/ ? 'ServerAdmin admin@customer.com' : line
}
----

***

[[closure2]]
[source,groovy]
void addClosure(String name, Set<String> includes, Closure closure)

This method add a Closure for an include pattern set to edit files based on lines.

:::

Example::
[source,groovy]
----
addClosure("editLine", ["**/folder1/file.conf", "**/folder2/file.conf"]) {
    String line -> line =~ /^\\w*ServerAdmin/ ? 'ServerAdmin admin@customer.com' : line
}
----

***

[[closure3]]
[source,groovy]
void addClosure(String name, PatternSet patternset,  Closure closure)

This method add a Closure for pattern set to edit files based on lines.

:::

Example::
[source,groovy]
----
def patternset = new PatternSet()
patternset.exclude("**/folder2/file.conf")
patternset.include("**/**/file.conf")

addClosure("editLine", patternset) {
    String line -> line =~ /^\\w*ServerAdmin/ ? 'ServerAdmin admin@customer.com' : line
}
----

***

== License

Copyright 2014-2018 Intershop Communications.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
