/*
* Copyright 2018 Intershop Communications AG.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
* limitations under the License.
*/
plugins {
    // project plugins
    id 'java-gradle-plugin'
    id 'groovy'
    id 'nebula.kotlin' version '1.2.31'

    // documentation
    id "org.jetbrains.dokka" version "0.9.16"

    // code analysis for kotlin
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-4"

    // test coverage
    id 'jacoco'

    // ide plugin
    id 'idea'

    // publish plugin
    id 'maven-publish'

    // intershop version plugin
    id 'com.intershop.gradle.scmversion' version '3.4.0'

    // plugin for documentation
    id 'org.asciidoctor.convert' version '1.5.3'

    // plugin for publishing to Gradle Portal
    id 'com.gradle.plugin-publish' version '0.9.10'

    // plugin for publishing to jcenter
    id 'com.jfrog.bintray' version '1.8.0'
}

scm {
    version {
        initialVersion = '1.0.0'
    }
}

group 'com.intershop.gradle.component'
description 'Gradle deployment plugins'
version = scm.version.version

gradlePlugin {
    plugins {
        componentDeployPlugin {
            id = 'com.intershop.gradle.component.installation'
            implementationClass = 'com.intershop.gradle.component.installation.ComponentInstallPlugin'
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// set correct project status
if (project.version.endsWith('-SNAPSHOT')) {
    status = 'snapshot'
}

test {
    // Gradle versions for test
    systemProperty 'intershop.gradle.versions', '4.6'
}

detekt {
    version = "1.0.0.RC6-4"
    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "$projectDir/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

task copyAsciiDoc {
    def outputDir = file("$buildDir/tmp/asciidoctorSrc")
    def inputFiles = fileTree(dir: rootDir, includes: ['**/*.asciidoc','docinfo.html'], exclude: 'build/**')

    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()

        copy {
            from inputFiles
            into outputDir
        }
    }
}

asciidoctorj {
    noDefaultRepositories = true
}

asciidoctor {
    sourceDir "${buildDir}/tmp/asciidoctorSrc"
    sources {
        include 'README.asciidoc'
    }

    backends 'html5', 'docbook'
    options doctype : 'article',
            ruby    : 'erubis'
    attributes  'latestRevision'     : project.version,
            'toc':'left',
            'toclevels':'2',
            'source-highlighter' : 'coderay',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'asciidoc_',
            'idseparator':'-',
            'docinfo1':'true'
}

asciidoctor.dependsOn copyAsciiDoc

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task kotlindocJar(type: Jar) {
    dependsOn dokka
    classifier = 'javadoc'
    from dokka.outputDirectory
}

// additional sources artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        intershopMvn(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact kotlindocJar {
                classifier "javadoc"
            }

            artifact(new File(buildDir, 'asciidoc/html5/README.html')) {
                classifier 'reference'
            }

            artifact(new File(buildDir, 'asciidoc/docbook/README.xml')) {
                classifier = 'docbook'
            }

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', "https:/gitlab.intershop.de/IntershopGradlePlugins/${project.name}")

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', "https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}")
                scm.appendNode( 'connection', "scm:git:https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}.git")

                def org = root.appendNode( 'organization' )
                org.appendNode( 'name', 'Intershop Communications' )
                org.appendNode( 'url', 'http://intershop.com' )

                def license = root.appendNode( 'licenses' ).appendNode( 'license' )
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0' )
                license.appendNode( 'distribution', 'repo' )
            }
        }
    }
}

publish.dependsOn asciidoctor

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'intershopcommunicationsag'

        licenses = ['Apache-2.0']
        vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"

        desc = project.description
        websiteUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
        issueTrackerUrl = "https://github.com/IntershopCommunicationsAG/${project.name}/issues"

        labels = ['intershop', 'gradle', 'plugin', 'deployment', 'component']
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = "${project.description} ${project.version}"
            released  = new Date()
            vcsTag = project.version
        }

        publications = ['intershopMvn']
    }
}

bintrayUpload.dependsOn asciidoctor

pluginBundle {
    website = "https://github.com/IntershopCommunicationsAG/${project.name}"
    vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
    description = project.description
    tags = ['intershop', 'gradle', 'plugin', 'deployment', 'component']

    plugins {
        componentDeployPlugin {
            id = gradlePlugin.plugins.componentDeployPlugin.id
            displayName = "${project.description} - Prepare Plugin"
        }
    }
}

configurations { codacy }

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

dependencies {
    compile 'com.intershop.gradle.component:component-descriptor:1.0.0-dev.9'

    compile 'org.apache.ivy:ivy:2.4.0'
    compile 'org.apache.maven:maven-model-builder:3.5.3'
    compile 'org.jsoup:jsoup:1.11.2'
    compile 'commons-io:commons-io:2.2'

    compileOnly 'org.jetbrains:annotations:15.0'

    // mock webserver
    testCompile 'com.squareup.okhttp3:okhttp:3.10.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.10.0'
    
    testCompile 'com.intershop.gradle.test:test-gradle-plugin:3.0.0'
    testCompile gradleTestKit()

    codacy 'com.codacy:codacy-coverage-reporter:3.0.0'
}

repositories {
    jcenter()
}